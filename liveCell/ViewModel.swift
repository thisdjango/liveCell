//
//  ViewModel.swift
//  liveCell
//
//  Created by Diana Tsarkova on 22.07.2024.
//

import Foundation
import UIKit.UIImage

/* 
 –°–æ–∑–¥–∞–≤–∞—è –Ω–æ–≤—ã–π –º–∏—Ä, –æ–Ω –Ω–∞–ø–æ–ª–Ω—è–µ—Ç –µ–≥–æ –∫–ª–µ—Ç–∫–∞–º–∏. –ö–∞–∂–¥—ã–π —Ä–∞–∑, –Ω–∞–∂–∏–º–∞—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏, –≤ —Å–ø–∏—Å–æ–∫ –∫–ª–µ—Ç–æ–∫ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –Ω–æ–≤–∞—è:

 ‚Äî —Ä–∞–≤–Ω–æ–≤–µ—Ä–æ—è—Ç–Ω–æ –æ–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–∫ –∂–∏–≤–æ–π, —Ç–∞–∫ –∏ –º—ë—Ä—Ç–≤–æ–π;

 ‚Äî –∂–∏–∑–Ω—å –∑–∞—Ä–æ–∂–¥–∞–µ—Ç—Å—è, –µ—Å–ª–∏ –¥–æ —ç—Ç–æ–≥–æ —Ç—Ä–∏–∂–¥—ã –ø–æ–¥—Ä—è–¥ —Å–æ–∑–¥–∞–ª–∞—Å—å –∂–∏–≤–∞—è –∫–ª–µ—Ç–∫–∞;

 ‚Äî –µ—Å–ª–∏ —Ç—Ä–∏–∂–¥—ã –ø–æ–¥—Ä—è–¥ —Ä–æ–¥–∏–ª–∞—Å—å –º—ë—Ä—Ç–≤–∞—è –∫–ª–µ—Ç–∫–∞, –∂–∏–∑–Ω—å —Ä—è–¥–æ–º —É–º–∏—Ä–∞–µ—Ç.

 –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–ø–∏—Å–æ–∫ –∫–ª–µ—Ç–æ–∫ –ø—É—Å—Ç.
 */

enum CellType: Int {
    case dead
    case alive
    case life

    var model: CellModel {
        switch self {
        case .dead:
            return CellModel(icon: "üíÄ", title: "–ú–µ—Ä—Ç–≤–∞—è", description: "–∏–ª–∏ –ø—Ä–∏–∫–∏–¥—ã–≤–∞–µ—Ç—Å—è")
        case .alive:
            return CellModel(icon: "üí•", title: "–ñ–∏–≤–∞—è", description: "–∏ —à–µ–≤–µ–ª–∏—Ç—Å—è!")
        case .life:
            return CellModel(icon: "üê£", title: "–ñ–∏–∑–Ω—å", description: "–ö—É-–∫—É!")
        }
    }
}

struct CellModel {
    let icon: String
    let title: String
    let description: String
}

class ViewModel {

    var updateHandler: (() -> Void)?

    var cells: [CellType] = []

    private var firstLifeIndex: Int?
    private var lastThreeType: CellType?
    private var threeTypeCount: Int = 0
    private var lastType: CellType?

    // –≤ —Å–ø–∏—Å–æ–∫ –∫–ª–µ—Ç–æ–∫ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –Ω–æ–≤–∞—è
    func addCell() {
        defer {
            updateHandler?()
        }
        
        // ‚Äî —Ä–∞–≤–Ω–æ–≤–µ—Ä–æ—è—Ç–Ω–æ –æ–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–∫ –∂–∏–≤–æ–π, —Ç–∞–∫ –∏ –º—ë—Ä—Ç–≤–æ–π;
        var newCellType = CellType(rawValue: Int.random(in: 0...1)) ?? .dead

        if let lastThreeType = lastThreeType {
            // –∂–∏–∑–Ω—å –∑–∞—Ä–æ–∂–¥–∞–µ—Ç—Å—è, –µ—Å–ª–∏ –¥–æ —ç—Ç–æ–≥–æ —Ç—Ä–∏–∂–¥—ã –ø–æ–¥—Ä—è–¥ —Å–æ–∑–¥–∞–ª–∞—Å—å –∂–∏–≤–∞—è –∫–ª–µ—Ç–∫–∞
            if lastThreeType == .alive {
                newCellType = .life
                self.firstLifeIndex = cells.count
                cells.append(newCellType)
                self.lastThreeType = nil
                threeTypeCount = 0
                lastType = newCellType
                return
            // –µ—Å–ª–∏ —Ç—Ä–∏–∂–¥—ã –ø–æ–¥—Ä—è–¥ —Ä–æ–¥–∏–ª–∞—Å—å –º—ë—Ä—Ç–≤–∞—è –∫–ª–µ—Ç–∫–∞, –∂–∏–∑–Ω—å —Ä—è–¥–æ–º —É–º–∏—Ä–∞–µ—Ç
            } else if let firstLifeIndex = firstLifeIndex, lastThreeType == .dead {
                print("CELL NUMBER \(firstLifeIndex) IS DEAD ")
                cells[firstLifeIndex] = .dead
                self.firstLifeIndex = nil
            }
        }
        cells.append(newCellType)
        if let type = lastType, newCellType == type {
            threeTypeCount += 1
            if threeTypeCount == 3 {
                lastThreeType = lastType
            }
        } else {
            if lastType != nil && lastType != .life {
                firstLifeIndex = nil
            }
            threeTypeCount = 1
            lastThreeType = nil
        }
        lastType = newCellType
    }

}
